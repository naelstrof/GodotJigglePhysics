[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://vlx47fdqtna5"]

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_x0ik1"]

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_j7klt"]
parameter_name = "BaseColor"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_gcg55"]
parameter_name = "NormalMap"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_bh0vq"]
parameter_name = "MaskMap"
color_default = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_vat54"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_2v3sf"]
function = 31

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_6e4br"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3vbyp"]
input_name = "inv_view_matrix"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D BaseColor : source_color;
uniform sampler2D MaskMap : hint_default_black;
uniform sampler2D NormalMap : hint_normal;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
// Input:9
	mat4 n_out9p0 = INV_VIEW_MATRIX;


// Input:8
	vec3 n_out8p0 = VERTEX;


// TransformVectorMult:10
	vec3 n_out10p0 = (n_out9p0 * vec4(n_out8p0, 1.0)).xyz;


// TextureParameterTriplanar:3
	vec4 n_out3p0 = triplanar_texture(BaseColor, triplanar_power_normal, n_out10p0);


// TextureParameterTriplanar:5
	vec4 n_out5p0 = triplanar_texture(MaskMap, triplanar_power_normal, n_out10p0);


// VectorDecompose:6
	float n_out6p0 = n_out5p0.x;
	float n_out6p1 = n_out5p0.y;
	float n_out6p2 = n_out5p0.z;
	float n_out6p3 = n_out5p0.w;


// FloatFunc:7
	float n_out7p0 = 1.0 - n_out6p3;


// TextureParameterTriplanar:4
	vec4 n_out4p0 = triplanar_texture(NormalMap, triplanar_power_normal, n_out10p0);


// Output:0
	ALBEDO = vec3(n_out3p0.xyz);
	METALLIC = n_out6p0;
	ROUGHNESS = n_out7p0;
	AO = n_out6p1;
	NORMAL_MAP = vec3(n_out4p0.xyz);


}
"
nodes/fragment/0/position = Vector2(600, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeTextureParameterTriplanar_j7klt")
nodes/fragment/3/position = Vector2(-360, 100)
nodes/fragment/4/node = SubResource("VisualShaderNodeTextureParameterTriplanar_gcg55")
nodes/fragment/4/position = Vector2(-360, 460)
nodes/fragment/5/node = SubResource("VisualShaderNodeTextureParameterTriplanar_bh0vq")
nodes/fragment/5/position = Vector2(-360, 780)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorDecompose_vat54")
nodes/fragment/6/position = Vector2(0, 860)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatFunc_2v3sf")
nodes/fragment/7/position = Vector2(240, 980)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_6e4br")
nodes/fragment/8/position = Vector2(-1520, 380)
nodes/fragment/9/node = SubResource("VisualShaderNodeInput_3vbyp")
nodes/fragment/9/position = Vector2(-1340, 240)
nodes/fragment/10/node = SubResource("VisualShaderNodeTransformVecMult_x0ik1")
nodes/fragment/10/position = Vector2(-940.53, 299.242)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 0, 9, 5, 0, 6, 0, 6, 0, 0, 2, 6, 3, 7, 0, 7, 0, 0, 3, 6, 1, 0, 6, 10, 0, 3, 1, 10, 0, 4, 1, 10, 0, 5, 1, 9, 0, 10, 0, 8, 0, 10, 1)
